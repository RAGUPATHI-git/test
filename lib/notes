1. Domain Layer
This layer contains entities, repositories, and use cases.

Entity (User Model)
dart
Copy
Edit
class User {
  final int id;
  final String name;

  const User({required this.id, required this.name});
}
Repository Interface
dart
Copy
Edit
abstract class UserRepository {
  Future<User> getUser(int id);
}
Use Case (Business Logic)
dart
Copy
Edit
import '../entities/user.dart';
import '../repositories/user_repository.dart';

class GetUser {
  final UserRepository repository;

  GetUser(this.repository);

  Future<User> call(int id) async {
    return await repository.getUser(id);
  }
}
2. Data Layer (Using Dummy Data)
This layer contains data sources and repository implementations.

Dummy Data Source
dart
Copy
Edit
import '../models/user_model.dart';

abstract class UserDataSource {
  Future<UserModel> getUser(int id);
}

class UserDataSourceImpl implements UserDataSource {
  @override
  Future<UserModel> getUser(int id) async {
    await Future.delayed(Duration(seconds: 1)); // Simulating delay
    List<UserModel> dummyUsers = [
      UserModel(id: 1, name: "Alice"),
      UserModel(id: 2, name: "Bob"),
      UserModel(id: 3, name: "Charlie"),
    ];
    return dummyUsers.firstWhere((user) => user.id == id, orElse: () => UserModel(id: 0, name: "Unknown"));
  }
}
Model (Extends Entity)
dart
Copy
Edit
import '../../domain/entities/user.dart';

class UserModel extends User {
  UserModel({required int id, required String name}) : super(id: id, name: name);
}
Repository Implementation
dart
Copy
Edit
import '../../domain/entities/user.dart';
import '../../domain/repositories/user_repository.dart';
import '../datasources/user_data_source.dart';

class UserRepositoryImpl implements UserRepository {
  final UserDataSource dataSource;

  UserRepositoryImpl({required this.dataSource});

  @override
  Future<User> getUser(int id) async {
    return await dataSource.getUser(id);
  }
}
3. Presentation Layer (UI & State Management)
This layer includes Bloc for state management and UI components.

Bloc (State Management)
dart
Copy
Edit
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../domain/usecases/get_user.dart';
import 'user_event.dart';
import 'user_state.dart';

class UserBloc extends Bloc<UserEvent, UserState> {
  final GetUser getUser;

  UserBloc(this.getUser) : super(UserInitial()) {
    on<GetUserEvent>((event, emit) async {
      emit(UserLoading());
      try {
        final user = await getUser(event.id);
        emit(UserLoaded(user));
      } catch (e) {
        emit(UserError("User not found"));
      }
    });
  }
}
Bloc Events
dart
Copy
Edit
abstract class UserEvent {}

class GetUserEvent extends UserEvent {
  final int id;
  GetUserEvent(this.id);
}
Bloc States
dart
Copy
Edit
import '../../domain/entities/user.dart';

abstract class UserState {}

class UserInitial extends UserState {}

class UserLoading extends UserState {}

class UserLoaded extends UserState {
  final User user;
  UserLoaded(this.user);
}

class UserError extends UserState {
  final String message;
  UserError(this.message);
}
UI Implementation
dart
Copy
Edit
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/user_bloc.dart';
import '../bloc/user_event.dart';
import '../bloc/user_state.dart';

class UserPage extends StatelessWidget {
  final TextEditingController idController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("User Profile")),
      body: Column(
        children: [
          TextField(controller: idController, decoration: InputDecoration(labelText: "Enter User ID")),
          ElevatedButton(
            onPressed: () {
              final id = int.tryParse(idController.text);
              if (id != null) {
                context.read<UserBloc>().add(GetUserEvent(id));
              }
            },
            child: Text("Fetch User"),
          ),
          BlocBuilder<UserBloc, UserState>(
            builder: (context, state) {
              if (state is UserLoading) return CircularProgressIndicator();
              if (state is UserLoaded) return Text("User: ${state.user.name}");
              if (state is UserError) return Text(state.message);
              return Container();
            },
          ),
        ],
      ),
    );
  }
}
4. Dependency Injection (Using Provider)
dart
Copy
Edit
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'features/feature_name/data/datasources/user_data_source.dart';
import 'features/feature_name/data/repositories/user_repository_impl.dart';
import 'features/feature_name/domain/usecases/get_user.dart';
import 'features/feature_name/presentation/bloc/user_bloc.dart';
import 'features/feature_name/presentation/pages/user_page.dart';

void main() {
  final userDataSource = UserDataSourceImpl();
  final userRepository = UserRepositoryImpl(dataSource: userDataSource);
  final getUser = GetUser(userRepository);

  runApp(MyApp(getUser: getUser));
}

class MyApp extends StatelessWidget {
  final GetUser getUser;

  MyApp({required this.getUser});

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => UserBloc(getUser),
      child: MaterialApp(
        home: UserPage(),
      ),
    );
  }
}
Summary
Domain Layer â†’ Defines business rules (User entity, UserRepository, GetUser use case).
Data Layer â†’ Uses dummy data instead of API (UserModel, UserDataSource, UserRepositoryImpl).
Presentation Layer â†’ Uses Flutter Bloc for state management and a UI screen (UserBloc, UserPage).
Dependency Injection â†’ Uses Provider for injecting dependencies.
This setup allows easy testing, better maintainability, and scalability. ðŸš€











